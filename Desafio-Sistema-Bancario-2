import datetime

class Usuario:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

class ContaCorrente:
    numero_conta = 1  # Número da conta inicia em 1 para cada instância

    def __init__(self, usuario):
        self.agencia = "0001"
        self.numero = ContaCorrente.numero_conta
        ContaCorrente.numero_conta += 1
        self.usuario = usuario
        self.saldo = 0
        self.movimentacoes = []

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.movimentacoes.append(f"Depósito: +R$ {valor:.2f} ({self._agora()})")

    def sacar(self, valor):
        if valor > 0 and valor <= 500 and self.saldo >= valor:
            self.saldo -= valor
            self.movimentacoes.append(f"Saque: -R$ {valor:.2f} ({self._agora()})")

    def extrato(self):
        print(f"Extrato Bancário da Conta {self.numero} - Agência {self.agencia}")
        print("=" * 40)
        for movimentacao in self.movimentacoes:
            print(movimentacao)
        if not self.movimentacoes:
            print("Não foram realizadas movimentações.")
        print("-" * 40)
        print(f"Saldo atual: R$ {self.saldo:.2f}")
        print("=" * 40)

    def _agora(self):
        agora = datetime.datetime.now()
        return agora.strftime("%d/%m/%Y %H:%M:%S")

usuarios = []
contas = []

def cadastrar_usuario(lista_usuarios, nome, data_nascimento, cpf, endereco):
    for usuario in lista_usuarios:
        if usuario.cpf == cpf:
            print("CPF já cadastrado. Não é possível criar outro usuário com o mesmo CPF.")
            return None

    usuario = Usuario(nome, data_nascimento, cpf, endereco)
    lista_usuarios.append(usuario)
    return usuario

def criar_conta_corrente(lista_contas, usuario):
    conta_corrente = ContaCorrente(usuario)
    lista_contas.append(conta_corrente)
    return conta_corrente

def depositar_conta():
    if not contas:
        print("Não há contas correntes cadastradas. Crie uma conta primeiro.")
        return

    print("Escolha uma conta para fazer o depósito:")
    for i, conta in enumerate(contas, start=1):
        print(f"{i}. Conta {conta.numero} - Agência {conta.agencia}")

    escolha = int(input("Digite o número correspondente à conta: "))

    if 1 <= escolha <= len(contas):
        conta = contas[escolha - 1]
        valor = float(input("Digite o valor a ser depositado: "))
        conta.depositar(valor)
        print(f"Depósito realizado na conta {conta.numero} com sucesso.")
    else:
        print("Escolha inválida. Tente novamente.")

def sacar_conta():
    if not contas:
        print("Não há contas correntes cadastradas. Crie uma conta primeiro.")
        return

    print("Escolha uma conta para fazer o saque:")
    for i, conta in enumerate(contas, start=1):
        print(f"{i}. Conta {conta.numero} - Agência {conta.agencia}")

    escolha = int(input("Digite o número correspondente à conta: "))

    if 1 <= escolha <= len(contas):
        conta = contas[escolha - 1]
        valor = float(input("Digite o valor a ser sacado: "))
        conta.sacar(valor)
        print(f"Saque realizado na conta {conta.numero} com sucesso.")
    else:
        print("Escolha inválida. Tente novamente.")

def visualizar_extrato():
    if not contas:
        print("Não há contas correntes cadastradas. Crie uma conta primeiro.")
        return

    print("Escolha uma conta para visualizar o extrato:")
    for i, conta in enumerate(contas, start=1):
        print(f"{i}. Conta {conta.numero} - Agência {conta.agencia}")

def listar_usuarios():
    if not usuarios:
        print("Não há usuários cadastrados.")
    else:
        print("Lista de Usuários:")
        for usuario in usuarios:
            print(f"Nome: {usuario.nome}, CPF: {usuario.cpf}, Data de Nascimento: {usuario.data_nascimento}, Endereço: {usuario.endereco}")

def listar_contas_correntes():
    if not contas:
        print("Não há contas correntes cadastradas.")
    else:
        print("Lista de Contas Correntes:")
        for conta in contas:
            print(f"Agência: {conta.agencia}, Número: {conta.numero}, Saldo: R$ {conta.saldo:.2f}, Usuário: {conta.usuario.nome}")

while True:
    print("Menu:")
    print("1. Cadastrar Usuário")
    print("2. Criar Conta Corrente")
    print("3. Depositar em Conta")
    print("4. Sacar de Conta")
    print("5. Visualizar Extrato")
    print("6. Sair")
    print("7. Listar Usuários")
    print("8. Listar Contas Correntes")

    escolha = int(input("Escolha a opção desejada: "))

    if escolha == 1:
        nome = input("Digite o nome do usuário: ")
        data_nascimento = input("Digite a data de nascimento: ")
        cpf = input("Digite o CPF: ")
        endereco = input("Digite o endereço: ")
        usuario = cadastrar_usuario(usuarios, nome, data_nascimento, cpf, endereco)
        if usuario:
            print(f"Usuário {usuario.nome} cadastrado com sucesso!")

    elif escolha == 2:
        if not usuarios:
            print("Não é possível criar uma conta sem um usuário. Cadastre um usuário primeiro.")
        else:
            listar_usuarios()
            escolha_usuario = int(input("Escolha o usuário para criar a conta (pelo índice): "))
            if 1 <= escolha_usuario <= len(usuarios):
                usuario = usuarios[escolha_usuario - 1]
                conta = criar_conta_corrente(contas, usuario)
                print(f"Conta corrente criada com sucesso para o usuário {usuario.nome}.")

    elif escolha == 3:
        depositar_conta()

    elif escolha == 4:
        sacar_conta()

    elif escolha == 5:
        visualizar_extrato()

    elif escolha == 6:
        print("Saindo do programa. Até mais!")
        break

    elif escolha == 7:
        listar_usuarios()

    elif escolha == 8:
        listar_contas_correntes()

    else:
        print("Escolha inválida. Tente novamente.")
